<?php
/**
 * PricingSummary
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\fulfillment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: 1.11.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\fulfillment\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\fulfillment\ObjectSerializer;

/**
 * PricingSummary Class Doc Comment
 *
 * @category Class
 * @description This type contains a summary of cumulative costs and charges for all line items of an order, including item price, price adjustments, taxes, delivery costs, and order discounts.
 * @package  macropage\SDKs\ebay\rest\fulfillment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PricingSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PricingSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adjustment' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'deliveryCost' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'deliveryDiscount' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'fee' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'priceDiscountSubtotal' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'priceSubtotal' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'tax' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount',
        'total' => '\macropage\SDKs\ebay\rest\fulfillment\Model\Amount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'adjustment' => null,
        'deliveryCost' => null,
        'deliveryDiscount' => null,
        'fee' => null,
        'priceDiscountSubtotal' => null,
        'priceSubtotal' => null,
        'tax' => null,
        'total' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustment' => 'adjustment',
        'deliveryCost' => 'deliveryCost',
        'deliveryDiscount' => 'deliveryDiscount',
        'fee' => 'fee',
        'priceDiscountSubtotal' => 'priceDiscountSubtotal',
        'priceSubtotal' => 'priceSubtotal',
        'tax' => 'tax',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustment' => 'setAdjustment',
        'deliveryCost' => 'setDeliveryCost',
        'deliveryDiscount' => 'setDeliveryDiscount',
        'fee' => 'setFee',
        'priceDiscountSubtotal' => 'setPriceDiscountSubtotal',
        'priceSubtotal' => 'setPriceSubtotal',
        'tax' => 'setTax',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustment' => 'getAdjustment',
        'deliveryCost' => 'getDeliveryCost',
        'deliveryDiscount' => 'getDeliveryDiscount',
        'fee' => 'getFee',
        'priceDiscountSubtotal' => 'getPriceDiscountSubtotal',
        'priceSubtotal' => 'getPriceSubtotal',
        'tax' => 'getTax',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustment'] = isset($data['adjustment']) ? $data['adjustment'] : null;
        $this->container['deliveryCost'] = isset($data['deliveryCost']) ? $data['deliveryCost'] : null;
        $this->container['deliveryDiscount'] = isset($data['deliveryDiscount']) ? $data['deliveryDiscount'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['priceDiscountSubtotal'] = isset($data['priceDiscountSubtotal']) ? $data['priceDiscountSubtotal'] : null;
        $this->container['priceSubtotal'] = isset($data['priceSubtotal']) ? $data['priceSubtotal'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjustment
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getAdjustment()
    {
        return $this->container['adjustment'];
    }

    /**
     * Sets adjustment
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $adjustment adjustment
     *
     * @return $this
     */
    public function setAdjustment($adjustment)
    {
        $this->container['adjustment'] = $adjustment;

        return $this;
    }

    /**
     * Gets deliveryCost
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getDeliveryCost()
    {
        return $this->container['deliveryCost'];
    }

    /**
     * Sets deliveryCost
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $deliveryCost deliveryCost
     *
     * @return $this
     */
    public function setDeliveryCost($deliveryCost)
    {
        $this->container['deliveryCost'] = $deliveryCost;

        return $this;
    }

    /**
     * Gets deliveryDiscount
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getDeliveryDiscount()
    {
        return $this->container['deliveryDiscount'];
    }

    /**
     * Sets deliveryDiscount
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $deliveryDiscount deliveryDiscount
     *
     * @return $this
     */
    public function setDeliveryDiscount($deliveryDiscount)
    {
        $this->container['deliveryDiscount'] = $deliveryDiscount;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $fee fee
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets priceDiscountSubtotal
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getPriceDiscountSubtotal()
    {
        return $this->container['priceDiscountSubtotal'];
    }

    /**
     * Sets priceDiscountSubtotal
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $priceDiscountSubtotal priceDiscountSubtotal
     *
     * @return $this
     */
    public function setPriceDiscountSubtotal($priceDiscountSubtotal)
    {
        $this->container['priceDiscountSubtotal'] = $priceDiscountSubtotal;

        return $this;
    }

    /**
     * Gets priceSubtotal
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getPriceSubtotal()
    {
        return $this->container['priceSubtotal'];
    }

    /**
     * Sets priceSubtotal
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $priceSubtotal priceSubtotal
     *
     * @return $this
     */
    public function setPriceSubtotal($priceSubtotal)
    {
        $this->container['priceSubtotal'] = $priceSubtotal;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \macropage\SDKs\ebay\rest\fulfillment\Model\Amount|null $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


