<?php
/**
 * CancelRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\fulfillment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: 1.11.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\fulfillment\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\fulfillment\ObjectSerializer;

/**
 * CancelRequest Class Doc Comment
 *
 * @category Class
 * @description This type contains information about a buyer request to cancel an order.
 * @package  macropage\SDKs\ebay\rest\fulfillment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CancelRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CancelRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cancelCompletedDate' => 'string',
        'cancelInitiator' => 'string',
        'cancelReason' => 'string',
        'cancelRequestedDate' => 'string',
        'cancelRequestId' => 'string',
        'cancelRequestState' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cancelCompletedDate' => null,
        'cancelInitiator' => null,
        'cancelReason' => null,
        'cancelRequestedDate' => null,
        'cancelRequestId' => null,
        'cancelRequestState' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancelCompletedDate' => 'cancelCompletedDate',
        'cancelInitiator' => 'cancelInitiator',
        'cancelReason' => 'cancelReason',
        'cancelRequestedDate' => 'cancelRequestedDate',
        'cancelRequestId' => 'cancelRequestId',
        'cancelRequestState' => 'cancelRequestState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancelCompletedDate' => 'setCancelCompletedDate',
        'cancelInitiator' => 'setCancelInitiator',
        'cancelReason' => 'setCancelReason',
        'cancelRequestedDate' => 'setCancelRequestedDate',
        'cancelRequestId' => 'setCancelRequestId',
        'cancelRequestState' => 'setCancelRequestState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancelCompletedDate' => 'getCancelCompletedDate',
        'cancelInitiator' => 'getCancelInitiator',
        'cancelReason' => 'getCancelReason',
        'cancelRequestedDate' => 'getCancelRequestedDate',
        'cancelRequestId' => 'getCancelRequestId',
        'cancelRequestState' => 'getCancelRequestState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancelCompletedDate'] = isset($data['cancelCompletedDate']) ? $data['cancelCompletedDate'] : null;
        $this->container['cancelInitiator'] = isset($data['cancelInitiator']) ? $data['cancelInitiator'] : null;
        $this->container['cancelReason'] = isset($data['cancelReason']) ? $data['cancelReason'] : null;
        $this->container['cancelRequestedDate'] = isset($data['cancelRequestedDate']) ? $data['cancelRequestedDate'] : null;
        $this->container['cancelRequestId'] = isset($data['cancelRequestId']) ? $data['cancelRequestId'] : null;
        $this->container['cancelRequestState'] = isset($data['cancelRequestState']) ? $data['cancelRequestState'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancelCompletedDate
     *
     * @return string|null
     */
    public function getCancelCompletedDate()
    {
        return $this->container['cancelCompletedDate'];
    }

    /**
     * Sets cancelCompletedDate
     *
     * @param string|null $cancelCompletedDate The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the cancellation request has actually been approved by the seller. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
     *
     * @return $this
     */
    public function setCancelCompletedDate($cancelCompletedDate)
    {
        $this->container['cancelCompletedDate'] = $cancelCompletedDate;

        return $this;
    }

    /**
     * Gets cancelInitiator
     *
     * @return string|null
     */
    public function getCancelInitiator()
    {
        return $this->container['cancelInitiator'];
    }

    /**
     * Sets cancelInitiator
     *
     * @param string|null $cancelInitiator This string value indicates the party who made the initial cancellation request. Typically, either the 'Buyer' or 'Seller'. If a cancellation request has been made, this field should be returned.
     *
     * @return $this
     */
    public function setCancelInitiator($cancelInitiator)
    {
        $this->container['cancelInitiator'] = $cancelInitiator;

        return $this;
    }

    /**
     * Gets cancelReason
     *
     * @return string|null
     */
    public function getCancelReason()
    {
        return $this->container['cancelReason'];
    }

    /**
     * Sets cancelReason
     *
     * @param string|null $cancelReason The reason why the cancelInitiator initiated the cancellation request. Cancellation reasons for a buyer might include 'order placed by mistake' or 'order won't arrive in time'. For a seller, a typical cancellation reason is 'out of stock'. If a cancellation request has been made, this field should be returned.
     *
     * @return $this
     */
    public function setCancelReason($cancelReason)
    {
        $this->container['cancelReason'] = $cancelReason;

        return $this;
    }

    /**
     * Gets cancelRequestedDate
     *
     * @return string|null
     */
    public function getCancelRequestedDate()
    {
        return $this->container['cancelRequestedDate'];
    }

    /**
     * Sets cancelRequestedDate
     *
     * @param string|null $cancelRequestedDate The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is returned for each cancellation request. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
     *
     * @return $this
     */
    public function setCancelRequestedDate($cancelRequestedDate)
    {
        $this->container['cancelRequestedDate'] = $cancelRequestedDate;

        return $this;
    }

    /**
     * Gets cancelRequestId
     *
     * @return string|null
     */
    public function getCancelRequestId()
    {
        return $this->container['cancelRequestId'];
    }

    /**
     * Sets cancelRequestId
     *
     * @param string|null $cancelRequestId The unique identifier of the order cancellation request. This field is returned for each cancellation request.
     *
     * @return $this
     */
    public function setCancelRequestId($cancelRequestId)
    {
        $this->container['cancelRequestId'] = $cancelRequestId;

        return $this;
    }

    /**
     * Gets cancelRequestState
     *
     * @return string|null
     */
    public function getCancelRequestState()
    {
        return $this->container['cancelRequestState'];
    }

    /**
     * Sets cancelRequestState
     *
     * @param string|null $cancelRequestState The current stage or condition of the cancellation request. This field is returned for each cancellation request. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CancelRequestStateEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setCancelRequestState($cancelRequestState)
    {
        $this->container['cancelRequestState'] = $cancelRequestState;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


